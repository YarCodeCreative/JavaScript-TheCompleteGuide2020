COURSE NOTES:


Template Literal Contstruct:    
    -using ${} allows you to inject javscript variables within a string without having to concantonate
    -Must use back tick in place of quotations
    -Extra white space or tabs are sent to the browser. BE CAREFUL
    -ex.:    let calculationDescription = `(${defaultResult} + 10 * 57)`;
    

To Renter Line Breaks:
    -\n
    -can be used inside quotations or back ticks

JAVASCRIPT VS TYPESCRIPT
    -
    
a function does not need to end with a semi-colon

Any user input recieved from an HTML element will always be a string.

Converting Data Types:
    -You can use parseInt or + to convert a string to an integer
    -ex: parseInt(userInput.value);  OR   +(userInput.value);
    -useing the + sign does not allow you to specify what kind of number you want

Special Operators:
    -currentResult = currentResult + enteredNumber; is the same as currentResult += enteredNumber;
    -currentResult++ is the same as currentResult + 1
    -currentResult-- is the same as currentResult - 1
    -I you write it like this: --currentResult
        if the operators are before the variable, it will return the value before the changes.
        if its after, it will return the value after the changes. 

Using Arrays:
    -delcare an array in the declarations section of the js file:
        let imAnArray = [];
    -add an item to an array:
        const item = 1;
        imAnArray.push(item);
    -access item:
        item = imAnArray[0];
    -see whats in the array through the console:
        console.log(imAnArray);
    -Arrays are of type Object

Using Objects:
    -declare an Object
        const imAnObject{
            imAKey: ImAValue,
            imAnotherKey: imAnotherValue
        } 
    -Objects use key-value pairs
    -Use commas to separare key-value pairs.
    -Note that there is no ; after an object is created.
    -Objects can be sent to arrays

null / undefined / NAN:
    -undefined is the default value of uninitialized variables. 
        Never assign undefinded as a value manually
    -null is never assumed by default. 
        You can assign this to a value if you want to reset or clear a variable.
    -NAN stands for 'not a number'. Technically its not its own type, but it is a number type
         and can be used in caluculations.
        It yields a new NAN and its the result of invalid calculations (e.g. 3 * hi).

typeof keyword:
    can be used to evaluate a variable

Defer keyword when loading scripts:
    -use the defer keyword in order to download scripts while the HTML file is 
        being parsed, but load them after its done. Otherwise parsing the HTML file
        will be paused until the scripts are executed. This helps speed up load times
    -call the scripts within the head element of the HTML file
    -the oder of script execution is preserved
    e.g.    <script src="assets/scripts/vendor.js" defer></script>

async keyword when loading scripts:
    -allows you to download and execute the script file even if the HTML file 
        is not done being parsed. do this if the script does not rely on the HTML file
    -async causes the script to load as soon as possible. Therefore the order of execution is
        not guaranteed.
     e.g.   <script src="assets/scripts/vendor.js" async></script>

===  /   !==
    -triple === checks for value and type
    -double == just checks for value
    - e.g.      2 === "2" 
                false
    -prefer to use === vs == to force you to write better code.

&&   ||
    -AND is written as &&
    -OR os written as ||

Falsy and Truthy values
    0   =   false
    any other number including negatives        =   false
    "" (empty string)                           =   true
    any other non-empty sting including "false" =   true
    {}. [], and all other obejects and arrays   =   true
        (this includes empty arrays and objects)
    null, undefinded, NaN                       =   false

